---
globs: frontend/**/*.tsx,frontend/**/*.jsx,**/*.css
description: Mobile-first UI design patterns and component guidelines
---

# Mobile-First UI Guidelines

## Design Principles

### Mobile-First Approach

- Design for smallest screen first (320px width)
- Progressive enhancement for larger screens
- Touch-friendly interface with 44px minimum target size
- Consider thumb reach zones for navigation
- Test on actual devices, not just browser dev tools

### Visual Hierarchy

```css
/* Primary actions - high contrast, large targets */
.btn-primary {
  @apply bg-blue-600 text-white py-4 px-8 text-lg font-semibold rounded-xl;
  min-height: 44px;
  min-width: 44px;
}

/* Secondary actions - subtle but accessible */
.btn-secondary {
  @apply bg-gray-100 text-gray-700 py-3 px-6 text-base rounded-lg border;
  min-height: 44px;
}
```

## Layout Patterns

### Safe Area Handling

```css
/* Handle notched devices */
.app-container {
  padding-top: env(safe-area-inset-top);
  padding-bottom: env(safe-area-inset-bottom);
  padding-left: env(safe-area-inset-left);
  padding-right: env(safe-area-inset-right);
}

/* Viewport meta tag required */
<meta name="viewport" content="width=device-width, initial-scale=1, viewport-fit=cover">
```

### Responsive Breakpoints

```css
/* Tailwind CSS mobile-first breakpoints */
/* Default: mobile (320px+) */
.container {
  @apply px-4;
}

/* sm: 640px+ */
@screen sm {
  .container {
    @apply px-6 max-w-sm mx-auto;
  }
}

/* md: 768px+ */
@screen md {
  .container {
    @apply px-8 max-w-md mx-auto;
  }
}

/* lg: 1024px+ */
@screen lg {
  .container {
    @apply px-12 max-w-lg mx-auto;
  }
}
```

## Component Patterns

### Lobby Code Display

```tsx
interface LobbyCodeProps {
  code: string;
  onShare?: () => void;
}

const LobbyCode: React.FC<LobbyCodeProps> = ({ code, onShare }) => (
  <div className="bg-gray-50 rounded-2xl p-6 text-center">
    <p className="text-sm text-gray-600 mb-2">Lobby Code</p>
    <div className="text-4xl font-mono font-bold tracking-wider text-gray-900 mb-4">
      {code}
    </div>
    <button
      onClick={onShare}
      className="btn-primary w-full"
      aria-label={`Share lobby code ${code}`}
    >
      Share Code
    </button>
  </div>
);
```

### Player List Component

```tsx
const PlayerList: React.FC<{ players: Player[] }> = ({ players }) => (
  <div className="space-y-2">
    {players.map((player) => (
      <div
        key={player.id}
        className="flex items-center justify-between p-4 bg-white rounded-lg shadow-sm"
      >
        <div className="flex items-center space-x-3">
          <div
            className={`w-3 h-3 rounded-full ${
              player.isConnected ? "bg-green-500" : "bg-gray-400"
            }`}
          />
          <span className="font-medium">{player.name}</span>
          {player.isHost && (
            <span className="px-2 py-1 text-xs bg-blue-100 text-blue-800 rounded-full">
              Host
            </span>
          )}
        </div>
      </div>
    ))}
  </div>
);
```

### Game Timer Component

```tsx
const GameTimer: React.FC<{ timeRemaining: number }> = ({ timeRemaining }) => {
  const minutes = Math.floor(timeRemaining / 60);
  const seconds = timeRemaining % 60;
  const isLowTime = timeRemaining < 60;

  return (
    <div
      className={`text-center p-4 rounded-xl ${
        isLowTime ? "bg-red-50 text-red-700" : "bg-blue-50 text-blue-700"
      }`}
    >
      <div className="text-3xl font-mono font-bold">
        {String(minutes).padStart(2, "0")}:{String(seconds).padStart(2, "0")}
      </div>
      <div className="text-sm font-medium">Time Remaining</div>
    </div>
  );
};
```

## Touch Interactions

### Gesture Handling

```tsx
const useSwipeGesture = (onSwipe: (direction: "left" | "right") => void) => {
  const [startX, setStartX] = useState<number | null>(null);

  const handleTouchStart = (e: React.TouchEvent) => {
    setStartX(e.touches[0].clientX);
  };

  const handleTouchEnd = (e: React.TouchEvent) => {
    if (!startX) return;

    const endX = e.changedTouches[0].clientX;
    const diff = startX - endX;
    const threshold = 50;

    if (Math.abs(diff) > threshold) {
      onSwipe(diff > 0 ? "left" : "right");
    }
    setStartX(null);
  };

  return { onTouchStart: handleTouchStart, onTouchEnd: handleTouchEnd };
};
```

### Haptic Feedback

```tsx
const triggerHapticFeedback = (
  type: "light" | "medium" | "heavy" = "light"
) => {
  if ("vibrate" in navigator) {
    const duration = type === "light" ? 10 : type === "medium" ? 20 : 50;
    navigator.vibrate(duration);
  }
};

// Use for important actions
<button
  onClick={() => {
    triggerHapticFeedback("medium");
    handleStartGame();
  }}
  className="btn-primary"
>
  Start Game
</button>;
```

## Navigation Patterns

### Bottom Navigation

```tsx
const BottomNavigation: React.FC = () => (
  <nav className="fixed bottom-0 left-0 right-0 bg-white border-t border-gray-200 pb-safe">
    <div className="flex justify-around py-2">
      {navItems.map((item) => (
        <button
          key={item.id}
          className="flex flex-col items-center p-2 min-w-[44px] min-h-[44px]"
          aria-label={item.label}
        >
          <item.icon className="w-6 h-6 mb-1" />
          <span className="text-xs">{item.label}</span>
        </button>
      ))}
    </div>
  </nav>
);
```

### Modal/Overlay Patterns

```tsx
const GameModal: React.FC<{ isOpen: boolean; onClose: () => void }> = ({
  isOpen,
  onClose,
  children,
}) => {
  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 z-50 flex items-center justify-center p-4">
      {/* Backdrop */}
      <div
        className="absolute inset-0 bg-black bg-opacity-50"
        onClick={onClose}
      />

      {/* Modal content */}
      <div className="relative bg-white rounded-2xl p-6 w-full max-w-sm mx-auto">
        <button
          onClick={onClose}
          className="absolute top-4 right-4 w-8 h-8 flex items-center justify-center"
          aria-label="Close modal"
        >
          ×
        </button>
        {children}
      </div>
    </div>
  );
};
```

## Loading & Error States

### Loading Animations

```tsx
const LoadingSpinner: React.FC = () => (
  <div className="flex items-center justify-center p-8">
    <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600" />
  </div>
);

const PulseLoader: React.FC = () => (
  <div className="animate-pulse space-y-4">
    <div className="h-4 bg-gray-200 rounded w-3/4" />
    <div className="h-4 bg-gray-200 rounded w-1/2" />
  </div>
);
```

### Error States

```tsx
const ErrorMessage: React.FC<{ message: string; onRetry?: () => void }> = ({
  message,
  onRetry,
}) => (
  <div className="text-center p-6 bg-red-50 rounded-lg">
    <div className="text-red-600 mb-4">⚠️</div>
    <p className="text-red-700 mb-4">{message}</p>
    {onRetry && (
      <button onClick={onRetry} className="btn-secondary">
        Try Again
      </button>
    )}
  </div>
);
```

## Accessibility

### ARIA Labels and Roles

```tsx
// Proper ARIA labeling for game components
<div
  role="group"
  aria-labelledby="player-list-heading"
  className="player-list"
>
  <h2 id="player-list-heading" className="sr-only">
    Players in lobby
  </h2>
  {/* Player list content */}
</div>

// Screen reader announcements for game events
<div aria-live="polite" aria-atomic="true" className="sr-only">
  {gameAnnouncement}
</div>
```

### Focus Management

```tsx
const useFocusManagement = () => {
  const focusElement = (selector: string) => {
    const element = document.querySelector(selector) as HTMLElement;
    element?.focus();
  };

  const trapFocus = (containerRef: React.RefObject<HTMLElement>) => {
    // Focus trap implementation for modals
  };

  return { focusElement, trapFocus };
};
```

## Performance Optimization

### Image Optimization

```tsx
const OptimizedImage: React.FC<{ src: string; alt: string }> = ({
  src,
  alt,
}) => (
  <picture>
    <source srcSet={`${src}.webp`} type="image/webp" />
    <source srcSet={`${src}.avif`} type="image/avif" />
    <img src={src} alt={alt} loading="lazy" className="w-full h-auto" />
  </picture>
);
```

### Virtual Scrolling for Large Lists

```tsx
const VirtualizedPlayerList: React.FC<{ players: Player[] }> = ({
  players,
}) => {
  // Implement virtual scrolling for lobbies with many players
  const [visibleRange, setVisibleRange] = useState({ start: 0, end: 10 });

  return (
    <div className="h-64 overflow-y-auto">
      {players.slice(visibleRange.start, visibleRange.end).map(renderPlayer)}
    </div>
  );
};
```


