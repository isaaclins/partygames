---
globs: backend/**/*,server/**/*
description: Backend development guidelines for Node.js/Express API
---

# Backend Development Guidelines

## Server Architecture

### Express Setup

```typescript
import express from "express";
import cors from "cors";
import { WebSocketServer } from "ws";
import { createServer } from "http";

const app = express();
const server = createServer(app);
const wss = new WebSocketServer({ server });

// CORS configuration for GitHub Pages
app.use(
  cors({
    origin:
      process.env.NODE_ENV === "production"
        ? "https://your-username.github.io"
        : "http://localhost:3000",
    credentials: true,
  })
);
```

### In-Memory State Management

```typescript
// Central game state store
class GameStateManager {
  private lobbies = new Map<string, LobbyState>();
  private playerConnections = new Map<string, WebSocket>();

  createLobby(): string {
    const code = generateLobbyCode();
    this.lobbies.set(code, new LobbyState());
    return code;
  }

  joinLobby(code: string, playerId: string, ws: WebSocket) {
    // Add player to lobby and track connection
  }

  cleanupInactiveLobbies() {
    // Remove lobbies with no active connections
  }
}
```

## API Design

### RESTful Endpoints

```typescript
// Lobby management
POST   /api/lobbies           // Create new lobby
GET    /api/lobbies/:code     // Get lobby info
PUT    /api/lobbies/:code/join // Join lobby
DELETE /api/lobbies/:code     // Delete lobby (host only)

// Game management
POST   /api/lobbies/:code/start // Start game
POST   /api/lobbies/:code/action // Game action
GET    /api/lobbies/:code/state  // Current game state
```

### WebSocket Events

```typescript
// Client to Server
interface ClientEvents {
  "join-lobby": { code: string; playerName: string };
  "start-game": { gameType: string };
  "game-action": { action: GameAction };
  "leave-lobby": {};
}

// Server to Client
interface ServerEvents {
  "lobby-updated": { lobby: LobbyState };
  "game-started": { gameState: GameState };
  "game-updated": { gameState: GameState };
  "player-joined": { player: Player };
  "player-left": { playerId: string };
  error: { message: string };
}
```

## Game Logic Architecture

### Base Game Interface

```typescript
interface Game {
  readonly type: string;
  readonly minPlayers: number;
  readonly maxPlayers: number;

  initialize(players: Player[]): GameState;
  processAction(state: GameState, action: GameAction): GameState;
  isGameOver(state: GameState): boolean;
  getPublicState(state: GameState, playerId: string): Partial<GameState>;
}
```

### Game Factory Pattern

```typescript
class GameFactory {
  private games = new Map<string, () => Game>();

  register(type: string, creator: () => Game) {
    this.games.set(type, creator);
  }

  create(type: string): Game {
    const creator = this.games.get(type);
    if (!creator) throw new Error(`Unknown game type: ${type}`);
    return creator();
  }
}

// Register games
gameFactory.register("spyfall", () => new SpyfallGame());
gameFactory.register("mafia", () => new MafiaGame());
```

## Connection Management

### WebSocket Handling

```typescript
wss.on("connection", (ws, request) => {
  const playerId = generatePlayerId();

  ws.on("message", (data) => {
    try {
      const event = JSON.parse(data.toString());
      handleClientEvent(playerId, event, ws);
    } catch (error) {
      ws.send(
        JSON.stringify({ type: "error", message: "Invalid message format" })
      );
    }
  });

  ws.on("close", () => {
    handlePlayerDisconnect(playerId);
  });

  ws.on("error", (error) => {
    console.error("WebSocket error:", error);
  });
});
```

### Reconnection Support

- Store player session temporarily after disconnect
- Allow reconnection within 5 minutes
- Restore game state for reconnected players
- Handle duplicate connections gracefully

## Error Handling & Logging

### Error Response Format

```typescript
interface ApiError {
  error: string;
  message: string;
  code?: string;
  details?: unknown;
}

// Centralized error handler
app.use((error: Error, req: Request, res: Response, next: NextFunction) => {
  const apiError: ApiError = {
    error: error.name,
    message: error.message,
    code: "INTERNAL_ERROR",
  };

  res.status(500).json(apiError);
});
```

### Logging Strategy

- Log all lobby creations and deletions
- Log WebSocket connections and disconnections
- Log game state changes (not full state, just events)
- Use structured logging for production monitoring

## Security & Validation

### Input Validation

```typescript
import Joi from "joi";

const lobbyCodeSchema = Joi.string().length(4).alphanum().uppercase();
const playerNameSchema = Joi.string().min(1).max(20).trim();

// Validate all inputs before processing
```

### Rate Limiting

- Limit lobby creation per IP (e.g., 5 per hour)
- Limit game actions per player (prevent spam)
- Implement connection limits per IP

## Performance Optimization

### Memory Management

- Clean up inactive lobbies every 30 minutes
- Remove disconnected players after timeout
- Limit maximum concurrent lobbies
- Implement lobby size limits

### Broadcasting Efficiency

```typescript
// Efficient state broadcasting
function broadcastToLobby(lobbyCode: string, event: ServerEvent) {
  const lobby = gameState.getLobby(lobbyCode);
  lobby.players.forEach((player) => {
    const ws = connections.get(player.id);
    if (ws?.readyState === WebSocket.OPEN) {
      ws.send(JSON.stringify(event));
    }
  });
}
```
