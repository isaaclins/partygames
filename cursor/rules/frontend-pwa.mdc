---
globs: frontend/**/*,*.tsx,*.ts,*.jsx,*.js
description: Frontend development guidelines for React PWA
---

# Frontend Development Guidelines

## React Component Patterns

### Component Structure

- Use functional components with TypeScript
- Implement proper error boundaries for game components
- Use React.memo for performance optimization in real-time updates
- Keep components small and focused (single responsibility)

### State Management

```typescript
// Use React Context for global state
interface GameContextType {
  lobbyCode: string | null;
  gameState: GameState;
  players: Player[];
  currentPlayer: Player | null;
}

// Use custom hooks for complex logic
const useGameConnection = (lobbyCode: string) => {
  // WebSocket connection logic
  // Real-time state synchronization
};
```

## PWA Requirements

### Service Worker Implementation

- Cache static assets (JS, CSS, images)
- Implement offline fallback pages
- Cache API responses with stale-while-revalidate strategy
- Handle update notifications gracefully

### Manifest Configuration

```json
{
  "name": "Party Games",
  "short_name": "PartyGames",
  "display": "standalone",
  "orientation": "portrait",
  "theme_color": "#your-brand-color",
  "background_color": "#ffffff",
  "start_url": "/",
  "scope": "/",
  "icons": [
    /* various sizes for different devices */
  ]
}
```

## Mobile-First Development

### Touch Interactions

- Minimum touch target size: 44px Ã— 44px
- Use haptic feedback for important actions
- Implement swipe gestures where appropriate
- Handle touch hold for secondary actions

### Responsive Design

- Start with mobile layout (320px width)
- Use Tailwind's mobile-first breakpoints
- Test on actual devices, not just browser dev tools
- Consider safe areas for notched devices

### Performance

- Lazy load non-critical components
- Optimize images with next-gen formats
- Use React.Suspense for loading states
- Minimize bundle size with tree shaking

## Real-Time Communication

### WebSocket Integration

```typescript
// Centralized WebSocket service
class GameWebSocketService {
  private ws: WebSocket | null = null;

  connect(lobbyCode: string) {
    // Connection logic with reconnection handling
  }

  sendAction(action: GameAction) {
    // Send game actions to server
  }

  onMessage(callback: (data: GameEvent) => void) {
    // Handle incoming game events
  }
}
```

### State Synchronization

- Implement optimistic updates for better UX
- Handle connection drops gracefully
- Show connection status to users
- Queue actions when offline (if applicable)

## Error Handling

- Show user-friendly error messages
- Implement retry mechanisms for network failures
- Handle malformed server responses
- Provide fallback UI for broken game states
